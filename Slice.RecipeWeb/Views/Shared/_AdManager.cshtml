@using Slice.Web.Common
@using Slice.Core
@using Slice.Web.Models
@model AdManagerModel
<script type='text/javascript'>
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        var gads = document.createElement('script');
        gads.async = true;
        gads.type = 'text/javascript';
        var useSSL = 'https:' == document.location.protocol;
        gads.src = (useSSL ? 'https:' : 'http:') +
        '//www.googletagservices.com/tag/js/gpt.js';
        var node = document.getElementsByTagName('script')[0];
        node.parentNode.insertBefore(gads, node);
    })();
</script>
<script type='text/javascript'>
    googletag.cmd.push(function () {
        @{
            int index = 1;
            foreach (AdSlot slot in Model.AdSlots)
            {
                string divId = string.Format(WebContext.Current.AdSlotFormatString, slot.ToString().ToLower());
                if (WebContext.Current.AdSlotSizes.ContainsKey(slot))
                {
                    System.Drawing.Point adSize = WebContext.Current.AdSlotSizes[slot];
                    @: googletag.defineSlot('@WebContext.Current.AdServiceUnit', [@adSize.X, @adSize.Y], '@divId').addService(googletag.companionAds()).addService(googletag.pubads()).setTargeting('pos', '@index');
                    index++;
                }
            }
        }
        @foreach (var item in Model.KeyValuePairs)
        {
            @: googletag.pubads().setTargeting('@item.Key', '@item.Value');
        }
        googletag.pubads().enableSingleRequest();
        googletag.companionAds().setRefreshUnfilledSlots(true);
        googletag.enableServices();
    });
</script>
